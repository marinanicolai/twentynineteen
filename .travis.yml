# Travis CI configuration file.
# @link https://travis-ci.org/

# For use with the Twenty Nineteen WordPress theme
# @link https://github.com/WordPress/twentynineteen/

# Declare project language and PHP versions to test against.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

# Newer versions like trusty don't have PHP 5.2 or 5.3
# https://blog.travis-ci.com/2017-07-11-trusty-as-default-linux-is-coming
dist: precise

# Cache content for faster build process.
# https://docs.travis-ci.com/user/caching/
cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

# Declare versions of PHP to use. Use one decimal max.
matrix:
    fast_finish: true

    include:
        - php: "7.3"
        - php: "7.2"
        - php: "7.1"
        - php: "7.0"
        - php: "5.6"
        - php: "5.5"
        - php: "5.4"
        - php: "5.3"
        # Current $required_php_version for WordPress: 5.2.4
        - php: "5.2"
          env: LINT=1

# Ditch sudo and use containers.
# @link https://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link https://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    global:
        # Current version in development is 5.0.
        # @link https://github.com/WordPress/WordPress
        - WP_VERSION=5.0
        - WP_MULTISITE=0

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    # Speed up build time by disabling Xdebug.
    # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
    # https://twitter.com/kelunik/status/954242454676475904
    - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
    - echo $WP_VERSION
    - echo $WP_MULTISITE
    - echo $LINT
    # Set up WordPress installation.
    - export WP_DEVELOP_DIR=/tmp/wordpress/
    - mkdir -p $WP_DEVELOP_DIR
    # Use the Git mirror of WordPress.
    - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
    # Set up Twenty Nineteen theme information.
    - theme_slug=$(basename $(pwd))
    - theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
    - cd ..
    # Avoid conflict with stock twentynineteen theme
    - if [ -d $theme_dir ]; then rm -r $theme_dir; fi
    - mv $theme_slug $theme_dir
    # Set up WordPress configuration.
    - cd $WP_DEVELOP_DIR
    - echo $WP_DEVELOP_DIR
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
    - sed -i "s/yourusernamehere/root/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    # Create WordPress database.
    - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
    - |
      if [[ ${TRAVIS_PHP_VERSION:0:3} != "5.2" ]] && [[ ${TRAVIS_PHP_VERSION:0:3} != "5.3" ]]; then
        # Install WPThemeReview stnadards, which will install PHP_CodeSniffer, WordPress Coding Standards and PHPCompatibility standards.
        composer install --dev --no-suggest
      fi
    # Hop into themes directory.
    - cd $theme_dir
    # After CodeSniffer install you should refresh your path.
    - phpenv rehash
    # Install JSHint, a JavaScript Code Quality Tool
    # @link https://jshint.com/docs/
    - if [[ "$LINT" == "1" ]]; then npm install -g jshint; fi
    - if [[ "$LINT" == "1" ]]; then wget https://develop.svn.wordpress.org/trunk/.jshintrc; fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search theme for PHP syntax errors.
    - find . \( -name '*.php' \) -exec php -lf {} \;
    # Run the theme through JSHint
    - if [[ "$LINT" == "1" ]]; then jshint .; fi
    # WordPress Coding Standards
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
    # --extensions: Only sniff PHP files.
    - if [[ "$LINT" == "1" ]]; then composer lint . -- -p -s -v -n --extensions=php; fi
